// knights of the round table
table.resultsTable.table
  thead
    tr
      th.number #
      th.nick IRC Nick
      th.requestsSoFar HTTP requests made
      th.requestsPerSecond HTTP requests/second
      th.timeTaken Time taken to capture flag
      th.chunksSoFar Chunks so far
  tbody
    - k = 0
    - each participant, k in participants
      - var participantClass = "resultsRow"
      - if (participant.deleted) { participantClass += " deleted"; }
      tr(data-participant=participant.nick, class=participantClass)
        td.number
          - if (!participant.deleted)
            a(name=participant.nick)
            = k+1
        td.nick= participant.nick
        td.requestsSoFar= participant.requests
        - if (participant.time) {
          td.requestsPerSecond= participant.requests / (participant.time/1000)
        - } else if (participant.startedAt) {
          - var dateDiff = (new Date()).getTime() - participant.startedAt;
          td.requestsPerSecond= participant.requests / (dateDiff/1000)
        - } else {
          td.requestsPerSecond Data unavailable
        - }
        - if (participant.time) {
          td.timeTaken= participant.time/1000
        - } else if (participant.deleted) {
          td.timeTaken
            abbr(title="Did not finish: left after they started capturing") DNF
        - } else {
          td.timeTaken
            small N/A
        - }
        td.chunksSoFar= participant.chunkTimes.length
      - var participantClass = "participant-" + encodeURIComponent(participant.nick)
      tr.extraData(class=participantClass)
        td
        td(colspan=5)
          div
            span
              | Lock grabbed: 
              i= participant.locks
              |  times
              - if (participant.requests != 0) {
              i= " (" + Math.round((participant.requests/participant.locks) * 100)/100
              |  requests/lock)
              - }
              | .<br>
            - if (participant.agent && participant.agent.length) {
              span
                | User agent: 
                i= participant.agent
                | .<br>
            - }
            | <br>
            b Chunk Breakdown
            table.chunkBreakdown.table
              thead
                tr
                  th.number #
                  th.seconds Seconds
                  th.cumSeconds Cumulative Seconds
                  th.requests Requests
                  th.cumRequests Cumulative Requests
                  th.requestsPerSecond Requests/second
                  th.locks Locks acquired
                  th.cumLocks Cumulative Locks
              tbody
                - var cS = 0, cR = 0, cL = 0
                - for (var i = 0; i < participant.chunkTimes.length; i++) {
                  tr
                    td.number= i+1
                    td.seconds= participant.chunkTimes[i]/1000
                    td.cumSeconds= (cS += participant.chunkTimes[i])/1000
                    td.requests= participant.chunkReqs[i]
                    td.cumRequests= (cR += participant.chunkReqs[i])
                    - if ((participant.chunkTimes[i]/1000) != 0) {
                      td.requestsPerSecond= participant.chunkReqs[i] / (participant.chunkTimes[i]/1000)
                    - } else {
                      td.requestsPerSecond 0
                    - }
                    td.locks= participant.chunkLocks[i]
                    td.cumLocks= (cL += participant.chunkLocks[i])
                - }